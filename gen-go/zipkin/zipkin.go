// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package zipkin

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type AnnotationType int64
const (
  AnnotationType_BOOL AnnotationType = 0
  AnnotationType_BYTES AnnotationType = 1
  AnnotationType_I16 AnnotationType = 2
  AnnotationType_I32 AnnotationType = 3
  AnnotationType_I64 AnnotationType = 4
  AnnotationType_DOUBLE AnnotationType = 5
  AnnotationType_STRING AnnotationType = 6
)

func (p AnnotationType) String() string {
  switch p {
  case AnnotationType_BOOL: return "BOOL"
  case AnnotationType_BYTES: return "BYTES"
  case AnnotationType_I16: return "I16"
  case AnnotationType_I32: return "I32"
  case AnnotationType_I64: return "I64"
  case AnnotationType_DOUBLE: return "DOUBLE"
  case AnnotationType_STRING: return "STRING"
  }
  return "<UNSET>"
}

func AnnotationTypeFromString(s string) (AnnotationType, error) {
  switch s {
  case "BOOL": return AnnotationType_BOOL, nil 
  case "BYTES": return AnnotationType_BYTES, nil 
  case "I16": return AnnotationType_I16, nil 
  case "I32": return AnnotationType_I32, nil 
  case "I64": return AnnotationType_I64, nil 
  case "DOUBLE": return AnnotationType_DOUBLE, nil 
  case "STRING": return AnnotationType_STRING, nil 
  }
  return AnnotationType(0), fmt.Errorf("not a valid AnnotationType string")
}


func AnnotationTypePtr(v AnnotationType) *AnnotationType { return &v }

func (p AnnotationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AnnotationType) UnmarshalText(text []byte) error {
q, err := AnnotationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AnnotationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AnnotationType(v)
return nil
}

func (p * AnnotationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Ipv4
//  - Port
//  - ServiceName
type Endpoint struct {
  Ipv4 int32 `thrift:"ipv4,1" db:"ipv4" json:"ipv4"`
  Port int16 `thrift:"port,2" db:"port" json:"port"`
  ServiceName string `thrift:"service_name,3" db:"service_name" json:"service_name"`
}

func NewEndpoint() *Endpoint {
  return &Endpoint{}
}


func (p *Endpoint) GetIpv4() int32 {
  return p.Ipv4
}

func (p *Endpoint) GetPort() int16 {
  return p.Port
}

func (p *Endpoint) GetServiceName() string {
  return p.ServiceName
}
func (p *Endpoint) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Endpoint)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ipv4 = v
}
  return nil
}

func (p *Endpoint)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *Endpoint)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *Endpoint) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Endpoint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Endpoint) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipv4", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ipv4: ", p), err) }
  if err := oprot.WriteI32(int32(p.Ipv4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipv4 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ipv4: ", p), err) }
  return err
}

func (p *Endpoint) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI16(int16(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *Endpoint) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("service_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:service_name: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.service_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:service_name: ", p), err) }
  return err
}

func (p *Endpoint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Endpoint(%+v)", *p)
}

// Attributes:
//  - Timestamp
//  - Value
//  - Host
//  - Duration
type Annotation struct {
  Timestamp int64 `thrift:"timestamp,1" db:"timestamp" json:"timestamp"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  Host *Endpoint `thrift:"host,3" db:"host" json:"host,omitempty"`
  Duration *int32 `thrift:"duration,4" db:"duration" json:"duration,omitempty"`
}

func NewAnnotation() *Annotation {
  return &Annotation{}
}


func (p *Annotation) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *Annotation) GetValue() string {
  return p.Value
}
var Annotation_Host_DEFAULT *Endpoint
func (p *Annotation) GetHost() *Endpoint {
  if !p.IsSetHost() {
    return Annotation_Host_DEFAULT
  }
return p.Host
}
var Annotation_Duration_DEFAULT int32
func (p *Annotation) GetDuration() int32 {
  if !p.IsSetDuration() {
    return Annotation_Duration_DEFAULT
  }
return *p.Duration
}
func (p *Annotation) IsSetHost() bool {
  return p.Host != nil
}

func (p *Annotation) IsSetDuration() bool {
  return p.Duration != nil
}

func (p *Annotation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Annotation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Annotation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Annotation)  ReadField3(iprot thrift.TProtocol) error {
  p.Host = &Endpoint{}
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *Annotation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Duration = &v
}
  return nil
}

func (p *Annotation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Annotation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Annotation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  return err
}

func (p *Annotation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Annotation) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHost() {
    if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host: ", p), err) }
    if err := p.Host.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host: ", p), err) }
  }
  return err
}

func (p *Annotation) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDuration() {
    if err := oprot.WriteFieldBegin("duration", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:duration: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.duration (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:duration: ", p), err) }
  }
  return err
}

func (p *Annotation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Annotation(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - AnnotationType
//  - Host
type BinaryAnnotation struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
  AnnotationType AnnotationType `thrift:"annotation_type,3" db:"annotation_type" json:"annotation_type"`
  Host *Endpoint `thrift:"host,4" db:"host" json:"host,omitempty"`
}

func NewBinaryAnnotation() *BinaryAnnotation {
  return &BinaryAnnotation{}
}


func (p *BinaryAnnotation) GetKey() string {
  return p.Key
}

func (p *BinaryAnnotation) GetValue() []byte {
  return p.Value
}

func (p *BinaryAnnotation) GetAnnotationType() AnnotationType {
  return p.AnnotationType
}
var BinaryAnnotation_Host_DEFAULT *Endpoint
func (p *BinaryAnnotation) GetHost() *Endpoint {
  if !p.IsSetHost() {
    return BinaryAnnotation_Host_DEFAULT
  }
return p.Host
}
func (p *BinaryAnnotation) IsSetHost() bool {
  return p.Host != nil
}

func (p *BinaryAnnotation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BinaryAnnotation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *BinaryAnnotation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *BinaryAnnotation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AnnotationType(v)
  p.AnnotationType = temp
}
  return nil
}

func (p *BinaryAnnotation)  ReadField4(iprot thrift.TProtocol) error {
  p.Host = &Endpoint{}
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *BinaryAnnotation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BinaryAnnotation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BinaryAnnotation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *BinaryAnnotation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *BinaryAnnotation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("annotation_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:annotation_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.AnnotationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.annotation_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:annotation_type: ", p), err) }
  return err
}

func (p *BinaryAnnotation) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHost() {
    if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:host: ", p), err) }
    if err := p.Host.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:host: ", p), err) }
  }
  return err
}

func (p *BinaryAnnotation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BinaryAnnotation(%+v)", *p)
}

// Attributes:
//  - TraceID
//  - Name
//  - ID
//  - ParentID
//  - Annotations
//  - BinaryAnnotations
//  - Debug
type Span struct {
  TraceID int64 `thrift:"trace_id,1" db:"trace_id" json:"trace_id"`
  // unused field # 2
  Name string `thrift:"name,3" db:"name" json:"name"`
  ID int64 `thrift:"id,4" db:"id" json:"id"`
  ParentID *int64 `thrift:"parent_id,5" db:"parent_id" json:"parent_id,omitempty"`
  Annotations []*Annotation `thrift:"annotations,6" db:"annotations" json:"annotations"`
  // unused field # 7
  BinaryAnnotations []*BinaryAnnotation `thrift:"binary_annotations,8" db:"binary_annotations" json:"binary_annotations"`
  Debug bool `thrift:"debug,9" db:"debug" json:"debug,omitempty"`
}

func NewSpan() *Span {
  return &Span{}
}


func (p *Span) GetTraceID() int64 {
  return p.TraceID
}

func (p *Span) GetName() string {
  return p.Name
}

func (p *Span) GetID() int64 {
  return p.ID
}
var Span_ParentID_DEFAULT int64
func (p *Span) GetParentID() int64 {
  if !p.IsSetParentID() {
    return Span_ParentID_DEFAULT
  }
return *p.ParentID
}

func (p *Span) GetAnnotations() []*Annotation {
  return p.Annotations
}

func (p *Span) GetBinaryAnnotations() []*BinaryAnnotation {
  return p.BinaryAnnotations
}
var Span_Debug_DEFAULT bool = false

func (p *Span) GetDebug() bool {
  return p.Debug
}
func (p *Span) IsSetParentID() bool {
  return p.ParentID != nil
}

func (p *Span) IsSetDebug() bool {
  return p.Debug != Span_Debug_DEFAULT
}

func (p *Span) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Span)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceID = v
}
  return nil
}

func (p *Span)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Span)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Span)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ParentID = &v
}
  return nil
}

func (p *Span)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Annotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Annotation{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Annotations = append(p.Annotations, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Span)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BinaryAnnotation, 0, size)
  p.BinaryAnnotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &BinaryAnnotation{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.BinaryAnnotations = append(p.BinaryAnnotations, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Span)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Debug = v
}
  return nil
}

func (p *Span) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Span"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Span) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trace_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trace_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.TraceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trace_id: ", p), err) }
  return err
}

func (p *Span) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *Span) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *Span) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetParentID() {
    if err := oprot.WriteFieldBegin("parent_id", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parent_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ParentID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parent_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parent_id: ", p), err) }
  }
  return err
}

func (p *Span) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:annotations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Annotations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:annotations: ", p), err) }
  return err
}

func (p *Span) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("binary_annotations", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:binary_annotations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BinaryAnnotations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BinaryAnnotations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:binary_annotations: ", p), err) }
  return err
}

func (p *Span) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetDebug() {
    if err := oprot.WriteFieldBegin("debug", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:debug: ", p), err) }
    if err := oprot.WriteBool(bool(p.Debug)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.debug (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:debug: ", p), err) }
  }
  return err
}

func (p *Span) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Span(%+v)", *p)
}

